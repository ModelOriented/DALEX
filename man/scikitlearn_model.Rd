% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scikitlearn_model.R
\name{scikitlearn_model}
\alias{scikitlearn_model}
\title{Wrapper for Python scikit-learn models}
\usage{
scikitlearn_model("gbm.pkl")
}
\arguments{
\item{path}{string - a path to pickle file}
}
\value{
An object of the class 'scikitlearn_model'.

It's a list with following fields:

\itemize{
\item \code{name} name of model
\item \code{type} type model, classification or regression
\item \code{params} object of class `scikitlearn_set` which in fact is list that consist of parameters of our model.
\item \code{predict_function} predict function extracted from original model. It is adjusted to DALEX demands and therfore fully compatibile. 
\item \code{model} it is original model received vie reticiulate function. Use it for computation.
}

\bold{Example of Python code}\cr
\code{
from pandas import DataFrame, read_csv \cr
import pandas as pd\cr
import pickle\cr
import sklearn.ensemble\cr
model = sklearn.ensemble.GradientBoostingClassifier() \cr
model = model.fit(titanic_train_X, titanic_train_Y)\cr
pickle.dump(model, open("gbm.pkl", "wb"))\cr
}
}
\description{
scikit-learn models may be lodaed into R enviromente like any other Python object. We may need it to inspect performance of our model 
and compre it with others, using R tools like DALEX. This function creates object that is easy accessible version of model 
exported form python via pickle file.
}
\examples{
##usage with explain()
have_picke <- reticulate::py_module_available("pickle")
## Not run:

if(have_picke){
library(dplyr)
library(DALEX)
library(reticulate)

explainer <- scikitlearn_model("inst//gbm.pkl") \%>\% DALEX::explain(data = titanic_test, y = titanic_test$survived)
model_performance(explainer)
}else{
print('Python testing environment is required.')
}


## End(Not run)

## Predictions with nedata
## Not run:
if(have_pickle){
library(DALEX)
library(reticulate)
model <- scikitlearn_model("inst//gbm.pkl")
predictions <- model$predict_function(model$model, titanic_test_X)
}else{
print('Python testing environment is required.')
}
## End(Not run)

}
